// <auto-generated />
using System;
using Atomex.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Atomex.WatchTower.Migrations
{
    [DbContext(typeof(ExchangeContext))]
    partial class ExchangeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Atomex.Entities.Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Atomex.Entities.PartyTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PartyTransactions");
                });

            modelBuilder.Entity("Atomex.Entities.Swap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AcceptorId")
                        .HasColumnType("bigint");

                    b.Property<string>("BaseCurrencyContract")
                        .HasColumnType("text");

                    b.Property<long>("InitiatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("QuoteCurrencyContract")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("SecretHash")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcceptorId")
                        .IsUnique();

                    b.HasIndex("InitiatorId")
                        .IsUnique();

                    b.ToTable("Swaps");
                });

            modelBuilder.Entity("Atomex.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BlockHeight")
                        .HasColumnType("bigint");

                    b.Property<long>("Confirmations")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TxId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Atomex.Entities.Party", b =>
                {
                    b.OwnsOne("Atomex.Entities.Requisites", "Requisites", b1 =>
                        {
                            b1.Property<long>("PartyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<decimal>("LockTime")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<string>("ReceivingAddress")
                                .HasColumnType("text");

                            b1.Property<string>("RefundAddress")
                                .HasColumnType("text");

                            b1.Property<decimal>("RewardForRedeem")
                                .HasColumnType("decimal(18,9)");

                            b1.Property<string>("SecretHash")
                                .HasColumnType("text");

                            b1.Property<string>("WatchTower")
                                .HasColumnType("text");

                            b1.HasKey("PartyId");

                            b1.ToTable("Parties");

                            b1.WithOwner()
                                .HasForeignKey("PartyId");
                        });
                });

            modelBuilder.Entity("Atomex.Entities.PartyTransaction", b =>
                {
                    b.HasOne("Atomex.Entities.Party", "Party")
                        .WithMany("Transactions")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atomex.Entities.Transaction", "Transaction")
                        .WithMany("Parties")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Atomex.Entities.Swap", b =>
                {
                    b.HasOne("Atomex.Entities.Party", "Acceptor")
                        .WithOne("AcceptorSwap")
                        .HasForeignKey("Atomex.Entities.Swap", "AcceptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atomex.Entities.Party", "Initiator")
                        .WithOne("InitiatorSwap")
                        .HasForeignKey("Atomex.Entities.Swap", "InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
